package cz.muni.fi.travelAgency.entities;

import javax.persistence.*;
import javax.validation.constraints.NotNull;
import java.time.LocalDate;
import java.util.Collections;
import java.util.HashSet;
import java.util.Set;

/**
 * Class representing trip.
 *
 * @author Simona Raucinova
 */
@Entity
@Table(name = "TRIPS")
public class Trip {

    /**
     * ID of trip generated by DB.
     */
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    /**
     * Day when trip starts.
     */
    @NotNull
    @Column(nullable = false)
    private LocalDate fromDate;

    /**
     * Day when trip ends.
     */
    @NotNull
    @Column(nullable = false)
    private LocalDate toDate;

    /**
     * Destination of the trip.
     */
    @NotNull
    @Column(nullable = false)
    private String destination;

    /**
     * Number of available places.
     */
    @NotNull
    @Column(nullable = false)
    private int availablePlaces;

    /**
     * Excursions assigned to trip.
     */
    @OneToMany(mappedBy="trip")
    private Set<Excursion> excursions = new HashSet<>();

    public Trip() {
    }

    public Trip(LocalDate fromDate, LocalDate toDate, int availablePlaces, Set<Excursion> excursions) {
        this.fromDate = fromDate;
        this.toDate = toDate;
        this.availablePlaces = availablePlaces;
        this.excursions = excursions;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public LocalDate getFromDate() {
        return fromDate;
    }

    public void setFromDate(LocalDate fromDate) {
        this.fromDate = fromDate;
    }

    public LocalDate getToDate() {
        return toDate;
    }

    public void setToDate(LocalDate toDate) {
        this.toDate = toDate;
    }

    public int getAvailablePlaces() {
        return availablePlaces;
    }

    public void setAvailablePlaces(int availablePlaces) {
        this.availablePlaces = availablePlaces;
    }

    public Set<Excursion> getExcursions() {
        return Collections.unmodifiableSet(excursions);
    }

    public void addExcursion(Excursion excursion) {
        this.excursions.add(excursion);
    }

    public void removeExcursion(Excursion excursion) {
        this.excursions.remove(excursion);
    }

    public String getDestination() {
        return destination;
    }

    public void setDestination(String destination) {
        this.destination = destination;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof Trip)) return false;

        Trip trip = (Trip) o;

        if (!getFromDate().equals(trip.getFromDate())) return false;
        if (!getToDate().equals(trip.getToDate())) return false;
        if (!getDestination().equals(trip.getDestination())) return false;
        return getExcursions() != null ? getExcursions().equals(trip.getExcursions()) : trip.getExcursions() == null;
    }

    @Override
    public int hashCode() {
        int result = getFromDate().hashCode();
        result = 31 * result + getToDate().hashCode();
        result = 31 * result + getDestination().hashCode();
        result = 31 * result + (getExcursions() != null ? getExcursions().hashCode() : 0);
        return result;
    }
}
