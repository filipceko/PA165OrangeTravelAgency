package cz.muni.fi.travelAgency.entities;

import javax.persistence.*;
import javax.validation.constraints.NotNull;
import java.util.*;

/**
 * Class representing trip.
 *
 * @author Simona Raucinova
 */
@Entity
@Table(name = "TRIPS")
public class Trip {

    /** ID of trip generated by DB. */
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    /** Day when trip starts. */
    @NotNull
    @Column(nullable = false)
    @Temporal(TemporalType.DATE)
    private Date fromDate;

    /** Day when trip ends. */
    @NotNull
    @Column(nullable = false)
    @Temporal(TemporalType.DATE)
    private Date toDate;

    /** Destination of the trip. */
    @NotNull
    @Column(nullable = false)
    private String destination;

    /** Number of available slots for customers. */
    @NotNull
    @Column(nullable = false)
    private int capacity;

    /** Excursions assigned to trip. */
    @OneToMany(mappedBy = "trip")
    private Set<Excursion> excursions = new HashSet<>();

    /** Reservations for this trip. */
    @OneToMany(mappedBy = "trip")
    private Set<Reservation> reservations = new HashSet<>();

    /**
     * Basic non-parametric constructor.
     */
    public Trip() {
    }

    /**
     * All fields constructor.
     */
    public Trip(Date fromDate, Date toDate, int availableSlots, Set<Excursion> excursions, Set<Reservation> reservations) {
        this.fromDate = fromDate;
        this.toDate = toDate;
        this.capacity = availableSlots;
        this.excursions = excursions;
        this.reservations = reservations;
    }

    /**
     * ID getter.
     * @return Trip's ID
     */
    public Long getId() {
        return id;
    }

    /**
     * ID setter, should be used by the DB.
     * @param id of the trip
     */
    public void setId(Long id) {
        this.id = id;
    }

    /**
     * Retrieves starting date of the trip.
     * @return Date the trip starts
     */
    public Date getFromDate() {
        return fromDate;
    }

    /**
     * Trip start setter.
     * @param fromDate Date the trip starts
     */
    public void setFromDate(Date fromDate) {
        this.fromDate = fromDate;
    }

    /**
     * Retrieves ending date of the trip.
     * @return Date the trip ends
     */
    public Date getToDate() {
        return toDate;
    }

    /**
     * Trip end setter.
     * @param toDate Date the trip ends
     */
    public void setToDate(Date toDate) {
        this.toDate = toDate;
    }

    /**
     * retrieves destination of this trip.
     * @return trip's destination
     */
    public String getDestination() {
        return destination;
    }

    /**
     *  Destination setter.
     * @param destination of this trip
     */
    public void setDestination(String destination) {
        this.destination = destination;
    }

    /**
     * Trip capacity getter.
     * @return number of available customer slots for this trip
     */
    public int getCapacity() {
        return capacity;
    }

    /**
     * Capacity setter.
     * @param capacity number of available customer slots.
     */
    public void setCapacity(int capacity) {
        this.capacity = capacity;
    }

    /**
     * Retrieves all excursions available for this trip.
     * @return unmodifiable et of available excursions
     */
    public Set<Excursion> getExcursions() {
        return Collections.unmodifiableSet(excursions);
    }

    /**
     * Adds excursion for this trip.
     * @param excursion to be added
     */
    public void addExcursion(Excursion excursion) {
        this.excursions.add(excursion);
    }

    /**
     * Removes one of the excursions fot this Trip.
     * @param excursion excursion to be removed
     */
    public void removeExcursion(Excursion excursion) {
        this.excursions.remove(excursion);
    }

    /**
     * Retrieves reservations for this trip.
     * @return unmodifiable et of reservations
     */
    public Set<Reservation> getReservations() {
        return Collections.unmodifiableSet(reservations);
    }

    /**
     * Adds reservation for this trip
     * @param reservation reservation to be added
     */
    public void addReservation(Reservation reservation) {
        this.reservations.add(reservation);
    }

    /**
     * Removes one of the reservations for this trip.
     * @param reservation reservation to be deleted
     */
    public void removeReservation(Reservation reservation) {
        reservations.remove(reservation);
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof Trip)) return false;
        Trip trip = (Trip) o;
        return Objects.equals(getFromDate(), trip.getFromDate()) &&
                Objects.equals(getToDate(), trip.getToDate()) &&
                Objects.equals(getDestination(), trip.getDestination());
    }

    @Override
    public int hashCode() {
        return Objects.hash(getFromDate(), getToDate(), getDestination());
    }
}
